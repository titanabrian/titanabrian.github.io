{"version":3,"sources":["components/SearchComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["about","Pane","display","alignItems","justifyContent","Heading","size","align","Paragraph","marginTop","SearchBarComponent","props","state","searchInputValue","event","this","setState","target","value","className","alt","src","SearchInput","marginBottom","placeholder","width","onChange","onChangeSearchHandle","bind","findString","React","Component","App","height","marginLeft","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAYMA,G,MAAQ,kBAACC,EAAA,EAAD,CACZC,QAAQ,MACRC,WAAW,SACXC,eAAe,UAEf,kBAACC,EAAA,EAAD,CACAC,KAAM,IACNC,MAAM,UAFN,UAIA,kBAACC,EAAA,EAAD,CACEF,KAAM,IACNC,MAAM,UACNE,UAAU,MAHZ,waAoDaC,E,kDAxCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,iBAAkB,MAHH,E,iEAOGC,GACpBC,KAAKC,SAAS,CACZH,iBAAiBC,EAAMG,OAAOC,U,+BAMhC,OAAO,kBAACjB,EAAA,EAAD,CACPC,QAAQ,MACRC,WAAW,SACXC,eAAe,UAEf,kBAACH,EAAA,EAAD,CACEC,QAAQ,QAER,yBACEiB,UAAU,cACVC,IAAI,QACJC,IAAI,4BAGT,kBAACC,EAAA,EAAD,CACCC,aAAa,KACbC,YAAY,0BACZC,MAAM,OACNC,SAAUX,KAAKY,qBAAqBC,KAAKb,QAEvCA,KAAKH,MAAMC,kBAhEOgB,EAgE2Bd,KAAKH,MAAMC,iBAhEvB,kBAACZ,EAAA,EAAD,CACrCC,QAAQ,MACRC,WAAW,SACXC,eAAe,UAEf,kBAACI,EAAA,EAAD,2BAA8B,qCAAWqB,EAAX,MAA9B,UA2DgF7B,GAhE3D,IAAC6B,M,GA4BSC,IAAMC,WCXxBC,MAhBf,WACE,OACE,kBAAC/B,EAAA,EAAD,CACAC,QAAQ,QACRC,WAAW,SACXC,eAAe,SACf6B,OAAO,OACPC,WAAW,MACXC,YAAY,MACZ1B,UAAU,MAEX,kBAAC,EAAD,QCJiB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cf0e1b7e.chunk.js","sourcesContent":["import { Heading, Pane, Paragraph, SearchInput } from 'evergreen-ui';\nimport React from 'react';\nimport './main.css';\n\nconst notFoundSearch = (findString) => <Pane\n  display=\"box\"\n  alignItems=\"center\"\n  justifyContent=\"center\"\n>\n  <Paragraph>Oops, i can't find <strong>\" {findString} \"</strong> :( </Paragraph>\n</Pane>\n\nconst about = <Pane\n  display=\"box\"\n  alignItems=\"center\"\n  justifyContent=\"center\"\n>\n  <Heading\n  size={800}\n  align=\"center\"\n  >#About</Heading>\n  <Paragraph\n    size={400}\n    align=\"justify\"\n    marginTop=\"2%\"\n  >An emphatic yet dedicated man is suits features to describe me as a person. I have an\n  excellent work ethic, high integrity of what I aim to achieve. My confidence in myself is second\n  to none, I believe if I can do it, then I will be. I have strong analytical skills and good at\n  teamwork. I am experienced in programming, machine learning, and website development. I\n  can easily adapt to new frameworks and technologies </Paragraph>\n</Pane>\n\nclass SearchBarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInputValue: null\n    };\n  }\n\n  onChangeSearchHandle (event) {\n    this.setState({\n      searchInputValue:event.target.value\n    });\n  }\n\n\n  render () {\n    return <Pane\n    display=\"box\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n  >\n    <Pane\n      display=\"flex\"\n    >\n      <img\n        className=\"hello-image\"\n        alt=\"hello\"\n        src=\"/pixeltrue-support.png\"\n      ></img>\n    </Pane>\n   <SearchInput\n    marginBottom=\"4%\"\n    placeholder=\"Find something about me\"\n    width=\"100%\"\n    onChange={this.onChangeSearchHandle.bind(this)}\n    />\n    { this.state.searchInputValue ? notFoundSearch(this.state.searchInputValue) : about }\n  </Pane>\n  }\n}\n\nexport default SearchBarComponent\n","import { Pane } from 'evergreen-ui';\nimport React from 'react';\nimport './App.css';\nimport SearchBarComponent from './components/SearchComponent';\n\nfunction App() {\n  return (\n    <Pane\n    display=\"block\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    height=\"100%\"\n    marginLeft=\"25%\"\n    marginRight=\"25%\"\n    marginTop=\"2%\"\n  >\n   <SearchBarComponent/>\n  </Pane>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}